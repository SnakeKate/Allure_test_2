name: Falcon Nightly Smoke Tests

on:
  push:
    branches: ["main"]

jobs:
  tests:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        env_name: ['dev']
    environment: 
      name: ${{ matrix.env_name }}
    steps: 
       - uses: actions/checkout@v4.1.6    
       - name: Install Node.js
         uses: actions/setup-node@v3
         with:
           node-version: '16'
      
       - run: npm install

       - name: Run tests
         run: npm test

    #   - name: Checkout Repository
    #     uses: actions/checkout@v4.1.6 
    #     with:
    #      ref: some-branch

    #   - name: Setup Java
    #     uses: actions/setup-java@v4
    #     with:
    #      distribution: 'temurin'
    #      java-version: '21'

    #  - name: Refactor .properties file for Basic Auth
    #    if: ${{ matrix.env_name == 'dev' }}
    #    run: sed -i "s~url=https://FALCON_BASIC_AUTH_USERNAME:FALCON_BASIC_AUTH_PASSWORD@~url=https://${{ secrets.FALCON_BASIC_AUTH_USERNAME }}:${{ secrets.FALCON_BASIC_AUTH_PASSWORD }}@~" src/test/resources/Environments/${{ matrix.env_name }}.properties

       
     #   env:
     #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
     #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
     #     AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

       - name: Generating Artifact
         id: artifact
         uses: actions/upload-artifact@v4
         if: always()
         with:
          name: allure-results-${{ matrix.env_name }}
          path: ./allure-results

  report2:
    if: always()
    needs: tests
    strategy:
      fail-fast: false
      matrix:
        env_name: ['dev']
    environment: 
      name: ${{ matrix.env_name }}
    runs-on: ubuntu-latest
    steps:

      - name: Install Allure CLI
        run: |
          curl -o allure-2.13.8.tgz -L https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/2.13.8/allure-commandline-2.13.8.tgz
          tar -zxvf allure-2.13.8.tgz
          sudo mv allure-2.13.8 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure
      
      - name: Repository Checkout
        uses: actions/checkout@v4
      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          
  #    - name: Install Netlify
  #      run: npm install netlify-cli@17.10.1 -g
  #    - name: Install Dependencies
  #      run: npm ci     


      - name: Download Build Artifacts
        id: download-artifacts
        uses: actions/download-artifact@v4.1.0
        with:
          name: allure-results-${{ matrix.env_name }}
          path: target./allure-results
             
      - name: Generate Allure Report
        run: allure generate -c target./allure-results -o target./allure-results-html
   #     run: allure generate target./allure-results --clean -o target./allure-report

 #     - name: Install AWS CLI
 #       run: |
 #         curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
 #         unzip awscliv2.zip
 #         sudo ./aws/install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           aws-region: eu-west-2 
     
      - name: Upload to S3
        run: aws s3 sync reports/allure-results-html s3://allure-reports-dev.snakekate/
      
      
 #     - name: Deploy to Netlify
 #       uses: nwtgck/actions-netlify@v3.0
 #       with:
 #         publish-dir: 'target./allure-report'
 #         production-branch: master
 #         github-token: ${{ secrets.GITHUB_TOKEN }}
 #         deploy-message: "Deploy from GitHub Actions"
 #         enable-pull-request-comment: false
 #         enable-commit-comment: true
 #         overwrites-pull-request-comment: true
 #       env:
 #         NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_API_TOKEN }}
 #         NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID_2 }}
 #         timeout-minutes: 1  

    #  - name: Send email using AWS SES
    #    if: always()
    #    uses: dsfx3d/action-aws-ses@v1
    #    env:
    #      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
    #    with:
    #      to: ${{ vars.RECIPIENTS }}
     #     from: 'github-action@${{ matrix.env_name }}.falconproject.xyz'
     #     subject: 'Falcon Automation smoke test results - ${{ steps.tests.outcome }} ${{ env.timestamp }}'
     #     body_html: <p1> If you would like to view the report, please follow the link  - ${{ vars.GH_PAGES_URL }}</p1> - ${{ vars.GH_PAGES_URL }}</p1>
